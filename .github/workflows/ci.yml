# Based on
# https://github.com/actions/starter-workflows/blob/main/ci/python-package.yml
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# https://docs.github.com/en/actions/learn-github-actions/migrating-from-travis-ci-to-github-actions

name: CI

env:
# Update this version to force-expire the pip cache
  pip-cache-version: 1
# Update this version to force-expire the CDF library cache
# (but see also the CDF library version on the cache config)
  cdf-cache-version: 1

on:
  schedule:
    - cron: '0 22 * * *'
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  # Required for manual triggering
  workflow_dispatch:

jobs:
  test:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "2.7"
            os: ubuntu-20.04
            numpy-version: ">=1.10.0,<1.11.0"
            piplist: "scipy>=0.11.0,<0.12.0 matplotlib>=1.5.0,<1.6.0 networkx>=1.0,<1.1 h5py>=2.6,<2.7 ffnet>=0.7.0,<0.8 astropy>=1.0,<1.1"
            cflags: "-Wno-error=format-security"
            dep-strategy: "oldest"
          - python-version: "2.7"
            os: ubuntu-20.04
            numpy-version: ">=1.16.0,<1.17.0"
            piplist: "scipy matplotlib networkx h5py ffnet astropy"
            cflags: ""
            dep-strategy: "newest"
          - python-version: "3.5"
            os: ubuntu-20.04
            numpy-version: ">=1.10.0,<1.11.0"
            piplist: "scipy>=0.17.0,<0.18.0 matplotlib>=1.5.0,<1.6.0 networkx>=1.3,<1.4 h5py>=2.6,<2.7 ffnet>=0.8.0<0.9 astropy>=1.0,<1.1"
            cflags: ""
            dep-strategy: "oldest"
          - python-version: "3.5"
            os: ubuntu-20.04
            numpy-version: ">=1.18.0,<1.19.0"
            piplist: "scipy matplotlib networkx h5py ffnet astropy"
            cflags: ""
            dep-strategy: "newest"
          - python-version: "3.6"
            os: ubuntu-20.04
            numpy-version: ">=1.12.0,<1.13.0"
            piplist: "scipy>=0.19.0,<0.20.0 matplotlib>=1.5.0,<1.6.0 networkx>=1.3,<1.4 h5py>=2.6,<2.7 ffnet>=0.8.0<0.9 astropy>=1.0,<1.1"
            cflags: "-Wno-error=format-security"
            dep-strategy: "oldest"
          - python-version: "3.6"
            os: ubuntu-20.04
            numpy-version: ">=1.19.0,<1.20.0"
            piplist: "scipy matplotlib networkx h5py ffnet astropy"
            cflags: ""
            dep-strategy: "newest"
          - python-version: "3.7"
            os: ubuntu-20.04
            numpy-version: ">=1.15.1,<1.16.0"
            piplist: "scipy>=1.0.0,<1.1.0 matplotlib>=1.5.0,<1.6.0 networkx>=1.3,<1.4 h5py>=2.6,<2.7 astropy>=2.0,<2.1"
            cflags: "-Wno-error=format-security"
            dep-strategy: "oldest"
          - python-version: "3.7"
            os: ubuntu-20.04
            numpy-version: ">=1.21.0"
            piplist: "scipy matplotlib networkx h5py astropy"
            cflags: ""
            dep-strategy: "newest"
          - python-version: "3.8"
            os: ubuntu-20.04
            numpy-version: ">=1.17.0,<1.18.0"
            piplist: "scipy>=1.0.0,<1.1.0 matplotlib>=1.5.0,<1.6.0 networkx>=1.3,<1.4 h5py>=2.6,<2.7 astropy>=2.0,<2.1"
            cflags: "-Wno-error=format-security"
            dep-strategy: "oldest"
          - python-version: "3.8"
            os: ubuntu-20.04
            numpy-version: ">=1.21.0"
            piplist: "scipy matplotlib networkx h5py astropy"
            cflags: ""
            dep-strategy: "newest"
          - python-version: "3.9"
            os: ubuntu-20.04
            numpy-version: ">=1.18.0,<1.19.0"
            piplist: "scipy>=1.5.0,<1.6.0 matplotlib>=1.5.0,<1.6.0 networkx>=1.3,<1.4 h5py>=2.6,<2.7 astropy>=2.0,<2.1"
            cflags: "-Wno-error=format-security"
            dep-strategy: "oldest"
          - python-version: "3.9"
            os: ubuntu-20.04
            numpy-version: ">=1.21.0"
            piplist: "scipy matplotlib networkx h5py astropy"
            cflags: ""
            dep-strategy: "newest"
          - python-version: "3.10"
            os: ubuntu-20.04
            numpy-version: ">=1.21.0,<1.22.0"
            piplist: "scipy>=1.7.2,<1.8.0 matplotlib>=2.2.0,<2.3.0 networkx>=1.3,<1.4 h5py>=3.6,<3.7 astropy>=4.0,<4.1"
            cflags: "-Wno-error=format-security"
            dep-strategy: "oldest"
          - python-version: "3.10"
            os: ubuntu-20.04
            numpy-version: ">=1.21.0"
            piplist: "scipy matplotlib networkx h5py astropy"
            cflags: ""
            dep-strategy: "newest"
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get Week
      id: get-week
      run: |
        echo "::set-output name=week::$(/bin/date -u "+%G%V")"
      shell: bash
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        # Force-expire the pip cache weekly
        key: pip-v${{ env.pip-cache-version}}-${{ steps.get-week.outputs.week }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.dep-strategy }}
        restore-keys: |
          pip-v${{ env.pip-cache-version}}-${{ steps.get-week.outputs.week }}-${{ matrix.os }}-${{ matrix.python-version }}-
          pip-v${{ env.pip-cache-version}}-${{ steps.get-week.outputs.week }}-${{ matrix.os }}-
    - name: Cache cdf
      uses: actions/cache@v2
      with:
        path: ~/cdf
        # Force-expire the CDF cache weekly
        key: cdf-v${{ env.cdf-cache-version}}-3.8.0.1-${{ steps.get-week.outputs.week }}-${{ matrix.os }}
    - name: Install dependencies
      env:
        NUMPY_VERSION: ${{ matrix.numpy-version }}
        PIPLIST: ${{ matrix.piplist }}
        CFLAGS: ${{ matrix.cflags }}
      run: |
        sudo apt-get update -qq
        # Needed for scipy versions without binary wheels
        sudo apt-get install libhdf5-serial-dev gcc gfortran xvfb libblas-dev liblapack-dev
        python -m pip install --upgrade pip
        # This allows pip to build (and thus cache) binary wheels
        pip install wheel
        pip install --force-reinstall "numpy${NUMPY_VERSION}"
        # Make sure new packages don't override numpy version
        pip install "numpy${NUMPY_VERSION}" ${PIPLIST}
        pip freeze
        if [ ! -d ${HOME}/cdf ]; then wget https://spdf.gsfc.nasa.gov/pub/software/cdf/dist/cdf38_0/linux/cdf38_0-dist-cdf.tar.gz; tar xzf cdf38_0-dist-cdf.tar.gz; cd cdf38_0-dist; make OS=linux ENV=gnu SHARED=yes CURSES=no FORTRAN=no all; make INSTALLDIR=$HOME/cdf/ install.lib install.definitions; rm -f ${HOME}/cdf/lib/libcdf.a; cd ..; fi
# Per https://github.com/actions/checkout/issues/15, this gets the MERGE
# commit of the PR, not just the tip of the PR.
    - name: checkout
      uses: actions/checkout@v2
    - name: Install and run tests
      working-directory: ${{ github.workspace }}
      run: |
        python setup.py build
        cd tests; . ${HOME}/cdf/bin/definitions.B; xvfb-run python test_all.py -v

# See https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  all-tests:
    name: All tests
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - name: Check test matrix status
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
